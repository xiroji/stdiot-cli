{"version":3,"sources":["cli.js"],"names":[],"mappings":"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","file":"cli.js","sourcesContent":["\n\nimport pollyfill from \"babel-polyfill\";\n\nimport Liftoff from \"liftoff\";\nimport chalk from \"chalk\";\nimport tildify from \"tildify\";\nimport {version} from \"./../package.json\";\nimport {statSync, readFileSync} from 'fs';\nimport path from \"path\";\nimport ini from \"ini\";\nimport pkg from \"../package.json\";\n\nimport PluginDirectory from './stdiot-plugin';\n\nconst moduleName = 'stdiot-cli';\nconst name = \"stdiot\";\n\nconst liftoff = new Liftoff({\n    name: name,\n    moduleName: moduleName,\n    configName: 'package.',\n    extensions: {\n        'json': null\n    }\n});\n\nclass Cli {\n\n    constructor(name) {\n        this.commandsList = new Array;\n        this.commands = new Map();\n        return this;\n    }\n\n    name(name) {\n        this.name = name;\n        return this;\n    }\n\n    version(version) {\n        this.version = version;\n        return this;\n    }\n\n    command(name, description, invoke) {\n        this.commandsList.push({\n            name: name,\n            description: description\n        });\n\n        this.commands.set(name, {\n            invoke: invoke\n        });\n    }\n\n    start(args) {\n\n        this.args = args;\n\n        args.shift();\n        args.shift();\n\n        if (args.length < 1) {\n            this.help();\n        } else {\n            var command = this.commands.get(args[0]);\n            command.invoke(this);\n        }\n    }\n\n    pad(str, width) {\n        var len = Math.max(0, width - str.length);\n        return str + Array(len + 1).join(' ');\n    }\n\n    help() {\n        console.log(`Usage: ${this.name} [command]`);\n        console.log();\n        console.log();\n        console.log(\"Commands:\");\n        let maxWidth = this.commandsList.reduce(function(max, command) {\n            return Math.max(max, command.name.length);\n        }, 0);\n        this.commandsList.forEach((c) => {\n            console.log(`\\t${this.pad(c.name, maxWidth)}\\t${c.description}`);\n        });\n        console.log();\n        console.log(\"help:\");\n    }\n}\n\nlet program = new Cli();\n\nprogram\n    .name(name)\n    .version(pkg.version);\n\n\nconst verifyLocalStdiot = function(env) {\n    if (!env.modulePath) {\n        console.log(\n            chalk.red(`error: ${moduleName} not found in`),\n            chalk.red(tildify(env.configBase)),\n            chalk.red(`Try running: npm install ${moduleName}`)\n        );\n        process.exit(1);\n    }\n}\n\nconst verifyGitInit = function(env) {\n    try {\n        statSync(path.join(env.configBase, '.git'));\n        env.gitVerified = true;\n    } catch (e) {\n        console.log(chalk.yellow(\n            \"warning: project doesn't appear to be initialized with git.\",\n            tildify(env.configBase),\n            \". Run `git init`.\"));\n    }\n}\n\nconst parseConfig = function(env) {\n    env.configData = JSON.parse(readFileSync(env.configPath, 'utf-8'));\n}\n\nconst invoke = function(env) {\n\n    verifyLocalStdiot(env);\n\n    if (env.configPath) {\n        if (tildify(env.configBase) !== tildify(process.cwd())) {\n            console.log(chalk.cyan(\n                \"loading config from: \", tildify(env.configPath))\n            );\n        }\n        parseConfig(env);\n        verifyGitInit(env);\n    }\n\n    let pluginDirectory = new PluginDirectory();\n    pluginDirectory.findPlugins();\n    pluginDirectory.registerPlugins();\n\n    pluginDirectory.plugins.forEach(p => {\n        program.command(p.pluginName, p.description, p.invoke);\n    });\n\n    program.start(process.argv);\n}\n\nliftoff.launch({}, invoke);\n"],"sourceRoot":"/source/"}